"""Categories for blog posts"""
type Category {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  slug: String!
  thumbnail: UploadFile
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
}

type CategoryAggregator {
  count: Int
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryConnection_id {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreatedAt {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionDescription {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionName {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionSlug {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionThumbnail {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionUpdatedAt {
  key: DateTime
  connection: CategoryConnection
}

type CategoryGroupBy {
  _id: [CategoryConnection_id]
  createdAt: [CategoryConnectionCreatedAt]
  updatedAt: [CategoryConnectionUpdatedAt]
  name: [CategoryConnectionName]
  description: [CategoryConnectionDescription]
  slug: [CategoryConnectionSlug]
  thumbnail: [CategoryConnectionThumbnail]
}

input CategoryInput {
  name: String!
  description: String!
  posts: [ID]
  slug: String!
  thumbnail: ID
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editCategoryInput {
  name: String
  description: String
  posts: [ID]
  slug: String
  thumbnail: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editPostInput {
  title: String
  secondaryTitle: String
  slug: String
  body: String
  author: ID
  excerpt: String
  isPublished: Boolean
  thumbnail: ID
  banner: ID
  category: ID
  tags: [ID]
  readTime: Int
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTagInput {
  name: String
  description: String
  posts: [ID]
  slug: String
  thumbnail: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  posts: [ID]
  firstName: String
  lastName: String
  thumbnail: ID
  bio: String
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Category | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnection_id | CategoryConnectionCreatedAt | CategoryConnectionUpdatedAt | CategoryConnectionName | CategoryConnectionDescription | CategoryConnectionSlug | CategoryConnectionThumbnail | Post | createPostPayload | updatePostPayload | deletePostPayload | PostConnection | PostAggregator | PostAggregatorSum | PostAggregatorAvg | PostAggregatorMin | PostAggregatorMax | PostGroupBy | PostConnection_id | PostConnectionCreatedAt | PostConnectionUpdatedAt | PostConnectionTitle | PostConnectionSecondaryTitle | PostConnectionSlug | PostConnectionBody | PostConnectionAuthor | PostConnectionExcerpt | PostConnectionIsPublished | PostConnectionThumbnail | PostConnectionBanner | PostConnectionCategory | PostConnectionReadTime | Tag | createTagPayload | updateTagPayload | deleteTagPayload | TagConnection | TagAggregator | TagGroupBy | TagConnection_id | TagConnectionCreatedAt | TagConnectionUpdatedAt | TagConnectionName | TagConnectionDescription | TagConnectionSlug | TagConnectionThumbnail | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionFirstName | UsersPermissionsUserConnectionLastName | UsersPermissionsUserConnectionThumbnail | UsersPermissionsUserConnectionBio

type Mutation {
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

"""Web app blog posts"""
type Post {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  secondaryTitle: String!
  slug: String
  body: String!
  author: UsersPermissionsUser
  excerpt: String!
  isPublished: Boolean!
  thumbnail: UploadFile
  banner: UploadFile
  category: Category
  readTime: Int
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
}

type PostAggregator {
  count: Int
  sum: PostAggregatorSum
  avg: PostAggregatorAvg
  min: PostAggregatorMin
  max: PostAggregatorMax
}

type PostAggregatorAvg {
  readTime: Float
}

type PostAggregatorMax {
  readTime: Float
}

type PostAggregatorMin {
  readTime: Float
}

type PostAggregatorSum {
  readTime: Float
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostConnection_id {
  key: ID
  connection: PostConnection
}

type PostConnectionAuthor {
  key: ID
  connection: PostConnection
}

type PostConnectionBanner {
  key: ID
  connection: PostConnection
}

type PostConnectionBody {
  key: String
  connection: PostConnection
}

type PostConnectionCategory {
  key: ID
  connection: PostConnection
}

type PostConnectionCreatedAt {
  key: DateTime
  connection: PostConnection
}

type PostConnectionExcerpt {
  key: String
  connection: PostConnection
}

type PostConnectionIsPublished {
  key: Boolean
  connection: PostConnection
}

type PostConnectionReadTime {
  key: Int
  connection: PostConnection
}

type PostConnectionSecondaryTitle {
  key: String
  connection: PostConnection
}

type PostConnectionSlug {
  key: String
  connection: PostConnection
}

type PostConnectionThumbnail {
  key: ID
  connection: PostConnection
}

type PostConnectionTitle {
  key: String
  connection: PostConnection
}

type PostConnectionUpdatedAt {
  key: DateTime
  connection: PostConnection
}

type PostGroupBy {
  _id: [PostConnection_id]
  createdAt: [PostConnectionCreatedAt]
  updatedAt: [PostConnectionUpdatedAt]
  title: [PostConnectionTitle]
  secondaryTitle: [PostConnectionSecondaryTitle]
  slug: [PostConnectionSlug]
  body: [PostConnectionBody]
  author: [PostConnectionAuthor]
  excerpt: [PostConnectionExcerpt]
  isPublished: [PostConnectionIsPublished]
  thumbnail: [PostConnectionThumbnail]
  banner: [PostConnectionBanner]
  category: [PostConnectionCategory]
  readTime: [PostConnectionReadTime]
}

input PostInput {
  title: String!
  secondaryTitle: String!
  slug: String
  body: String!
  author: ID
  excerpt: String!
  isPublished: Boolean!
  thumbnail: ID
  banner: ID
  category: ID
  tags: [ID]
  readTime: Int
}

type Query {
  category(id: ID!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  tag(id: ID!): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  tagsConnection(sort: String, limit: Int, start: Int, where: JSON): TagConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""Tags for blog articles"""
type Tag {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  slug: String!
  thumbnail: UploadFile
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
}

type TagAggregator {
  count: Int
}

type TagConnection {
  values: [Tag]
  groupBy: TagGroupBy
  aggregate: TagAggregator
}

type TagConnection_id {
  key: ID
  connection: TagConnection
}

type TagConnectionCreatedAt {
  key: DateTime
  connection: TagConnection
}

type TagConnectionDescription {
  key: String
  connection: TagConnection
}

type TagConnectionName {
  key: String
  connection: TagConnection
}

type TagConnectionSlug {
  key: String
  connection: TagConnection
}

type TagConnectionThumbnail {
  key: ID
  connection: TagConnection
}

type TagConnectionUpdatedAt {
  key: DateTime
  connection: TagConnection
}

type TagGroupBy {
  _id: [TagConnection_id]
  createdAt: [TagConnectionCreatedAt]
  updatedAt: [TagConnectionUpdatedAt]
  name: [TagConnectionName]
  description: [TagConnectionDescription]
  slug: [TagConnectionSlug]
  thumbnail: [TagConnectionThumbnail]
}

input TagInput {
  name: String!
  description: String!
  posts: [ID]
  slug: String!
  thumbnail: ID
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTagInput {
  where: InputID
  data: editTagInput
}

type updateTagPayload {
  tag: Tag
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  posts: [ID]
  firstName: String
  lastName: String
  thumbnail: ID
  bio: String
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  firstName: String
  lastName: String
  thumbnail: UploadFile
  bio: String
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBio {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionFirstName {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionLastName {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionThumbnail {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  firstName: [UsersPermissionsUserConnectionFirstName]
  lastName: [UsersPermissionsUserConnectionLastName]
  thumbnail: [UsersPermissionsUserConnectionThumbnail]
  bio: [UsersPermissionsUserConnectionBio]
}
