cd ~/proost/dev/; pm2 flush; pm2 kill; pm2 flush; clear; NODE_ENV=production pm2 start server.js --name api; pm2 logs

cd ~/proost/web/; rm -rf .build; node prepare.js; pm2 flush; pm2 delete web; pm2 flush; clear; yarn build; NODE_ENV=production pm2 start ./server/index.js --name web; pm2 logs


cd ~/proost/web/; rm -rf .build; node prepare.js; pm2 flush; clear; yarn build; NODE_ENV=production pm2 start ./server/index.js --name web; pm2 logs




WEB
cd ~/proost/dev/; pm2 flush; pm2 kill; pm2 flush; clear; NODE_ENV=production pm2 start server.js --name api; cd ~/proost/web/; rm -rf .build; node prepare.js; pm2 flush; clear; yarn build; NODE_ENV=production pm2 start ./server/index.js --name web; pm2 logs


REMEMBER ME
during first login:
1. create hash
2. store hash as cookie
3. store hash in db (user document)
during logout:
1. check if hash cookie exists
2. if yes, delete all cookies except hash cookie
3. if no, delete all cookies
during subsequent logins
1. check if hash cookie exists
2. if yes, match it with hash stored in db (user document)
3. if matched, create userinfo cookie and proceed
4. if not matched or if hash cookie doesn't exist, present login dialog


CONNECT TO REDIS
telnet proost-sessions.fizfjx.0001.use2.cache.amazonaws.com 6379

REDIS COMMANDS
keys *
flushall
ctrl-] (exit redis)
ctrl-z (exit telnet)



REFRESH/FIRST LOAD
get session id from browser
look up session id on redis
if id present in redis, stay logged in
if not present, log out*

to log out, delete all cookies.




sudo apt install gcc
sudo apt install make
sudo apt install build-essential
yarn add hiredis redis






cookie tampered
google logged out











REGISTER:
------------

Input email
Generate token

check if email exists in db
    no:
          create entry with email and token
          send verification email
    yes:
          retrieve entry
          does entry have a token?
                yes: update token, send verification email
                no: does entry have password?
                      yes: throw error - account already exists
                      no: add token to entry and send verification email



VERIFICATION:
-----------------

retrieve email and token from link
check if email exists in db
    no: throw error - this link has expired
    yes: check if entry contains token
          no: throw error - this link has expired
          yes: do tokens match?
                no: throw error - this link has expired
                yes: check if entry contains firstname, lastname, username
                        offer to add missing data (firstname, lastname, username)
                        offer to add password
                        offer to confirm password
                        validate fields on client
                        validate fields on server
                        encrypt password using argon, delete token and update db
                        show success page
