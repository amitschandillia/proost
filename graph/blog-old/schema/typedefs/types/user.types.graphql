# Types
enum Privilege {
  GUEST
  AUTHOR
  EDITOR
  ADMIN
  OWNER
}
type Error {
  code: String,
  name: String,
  message: String,
}
type AuthData {
  _id: ID!,
  firstName: String!,
  username: String!,
  privileges: [Privilege]!,
  apiKey: String!,
  token: String!,
  tokenExpiration: Int!,
}
type User {
  _id: ID,
  firstName: String,
  username: String,
  password: String,
  roles: [String],
  permissions: [String],
  createdAt: DateTime,
  updatedAt: DateTime,
  apiKey: String,
  error: Error,
  # articles (
  #   isMarkedForDeletion: Boolean,
  #   isPublished: Boolean,
  #   isSubmitted: Boolean,
  # ): [Article],
}




# Definitions: Queries
type Query {
  users: [User!]!,
  user(_id: ID!): User,
  login(username: String!, password: String!): AuthData,
}




# Definitions: Input objects
input UserInfo {
  firstName: String!,
  username: String!,
  password: String!,
}
# Definitions: Mutations
type Mutation {
  createOwner(userInfo: UserInfo!): User,
  createUser(userInfo: UserInfo!): User,
  editPrivileges(
    username: String!,
    privileges: [Privilege],
  ): User,
  editRoles(
    username: String!,
    roles: [String],
  ): User,
  # editPrivileges(userInfo: UserInfo): User,
  # login(username: String!, password: String!): AuthData,
  # updateAuthor(_id: ID!, authorInfo: AuthorInfo!): Author,
}
